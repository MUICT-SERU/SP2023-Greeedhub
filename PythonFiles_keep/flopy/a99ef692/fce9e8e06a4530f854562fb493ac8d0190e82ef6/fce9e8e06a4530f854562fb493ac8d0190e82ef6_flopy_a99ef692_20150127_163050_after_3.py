"""
mfzon module.  Contains the ModflowDrn class. Note that the user can access
the ModflowDrn class as `flopy.modflow.ModflowDrn`.

Additional information for this MODFLOW package can be found at the `Online
MODFLOW Guide
<http://water.usgs.gov/ogw/modflow/MODFLOW-2005-Guide/index.html?drn.htm>`_.

"""
import sys
import collections
import numpy as np
from flopy.mbase import Package
from flopy.utils import util_2d

class ModflowPval(Package):
    """
    MODFLOW Parameter Value Package Class.

    Parameters
    ----------
    model : model object
        The model object (of type :class:`flopy.modflow.mf.Modflow`) to which
        this package will be added.


    Attributes
    ----------
    mxactd : int
        Maximum number of drains for a stress period.  This is calculated
        automatically by FloPy based on the information in
        layer_row_column_data.

    Methods
    -------

    See Also
    --------

    Notes
    -----
    Parameters are not supported in FloPy.

    Examples
    --------

    >>> import flopy
    >>> m = flopy.modflow.Modflow()
    >>> lrcd = [[[2, 3, 4, 10., 100.]]]  #this drain will be applied to all
    >>>                                  #stress periods
    >>> drn = flopy.modflow.ModflowDrn(m, layer_row_column_data=lrcd)

    """
    def __init__(self, model, pval_dict=None,
                 extension ='pval', unitnumber=1005):
        Package.__init__(self, model, extension, 'PVAL', unitnumber) # Call ancestor's init to set self.parent, extension, name and unit number
        self.heading = '# PVAL for MODFLOW, generated by Flopy.\n# Really...is this actually helpful?'
        self.url = 'pval.htm'

        self.npval = 0
        if pval_dict is not None:
            self.pval = len(pval_dict)
            self.pval_dict = pval_dict
        self.parent.add_package(self)

    def write_file(self):
        '''
        empty method - does nothing
        '''
        pass


    def __getitem__(self, item):
        '''
        overload __getitem__ to return a value from the pval_dict
        '''

        if item in self.pval_dict.keys():
            return self.pval_dict[item]
        else:
            return None

    @staticmethod
    def load(f, model, ext_unit_dict=None):
        '''
        f is either a filename or a file handle.  if the arrays in the file
        are specified using interal, external, or older style array control
        records, then f should be a file handle, and the ext_unit_dict
        dictionary of unitnumber:open(filename, 'r') must be included.
        '''
        if type(f) is not file:
            filename = f
            f = open(filename, 'r')
        else:
            filename = f.name

        #dataset 0 -- header
        while True:
            line = f.readline()
            if line[0] != '#':
                break
        #dataset 1
        t = line.strip().split()
        npval = int(t[0])

        sys.stdout.write('reading parameter values from "{:<10s}"\n'.format(filename))

        #read PVAL data
        pval_dict = dict()
        for n in xrange(npval):
            line = f.readline()
            t = line.strip().split()
            if len(t[0]) > 10:
                pvalnam = t[0][0:10].lower()
            else:
                pvalnam = t[0].lower()

            pval_dict[pvalnam] = float(t[1])

        pval = ModflowPval(model, pval_dict=pval_dict)
        return pval

