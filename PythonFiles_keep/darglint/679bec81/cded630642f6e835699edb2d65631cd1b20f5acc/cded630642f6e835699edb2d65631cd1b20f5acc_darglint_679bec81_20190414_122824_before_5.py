"""Tests for a grammar generated by bnf_to_cnf, using cyk.

Original grammar:

    <start> ::= <sentence>

    <sentence> ::=
          <trans_verb_phrase>
        | <noun_phrase> <trans_verb_phrase>
        | <intrans_verb_phrase>

    <intrans_verb_phrase> ::=
          <intransitive_verb> <noun_phrase>
        | <intransitive_verb>

    <trans_verb_phrase> ::=
          <transitive_verb> <noun_phrase>
        | <transitive_verb>

    <intransitive_verb> ::=
          "Hegh"
        | "quS"

    <transitive_verb> ::=
          "HoH"
        | "qIp"

    <noun_phrase> ::=
          <noun>
        | <noun> <adjective>
        | <noun> <noun>
        | <noun> <adjective> <noun>
        | <noun> <noun> <adjective>

    <noun> ::=
          "Duj"
        | "loD"
        | "puq"
        | "bIQ"

    <adjective> ::=
          "val"
        | "QIp"

"""

from unittest import TestCase

from darglint.parse.grammar import BaseGrammar
from darglint.parse.grammar import Production as P
from darglint.parse.cyk import parse


# Generated on 2019-04-13 10:37:04.398899
class Grammar(BaseGrammar):
    productions = [
        P("start", ("intransitive_verb", "noun_phrase"), "Hegh", "quS",
          ("noun_phrase", "trans_verb_phrase"),
          ("transitive_verb", "noun_phrase"), "HoH", "qIp"),
        P("trans_verb_phrase", ("transitive_verb", "noun_phrase"), "HoH",
          "qIp"),
        P("intransitive_verb", "Hegh", "quS"),
        P("transitive_verb", "HoH", "qIp"),
        P("noun_phrase", ("noun", "adjective"), ("noun", "noun"),
          ("noun", "noun_phrase0"), ("noun", "noun_phrase1"), "Duj",
          "loD", "puq", "bIQ"),
        P("noun", "Duj", "loD", "puq", "bIQ"),
        P("adjective", "val", "QIp"),
        P("noun_phrase0", ("adjective", "noun")),
        P("noun_phrase1", ("noun", "adjective")),
    ]

    start = "start"


class GeneratedGrammarTest(TestCase):

    def test_valid_sentences(self):
        sentences = [
            "Hegh puq",
            "loD HoH puq Duj",
            "qIp bIQ QIp",
            "puq val qIp loD",
        ]
        for sentence in sentences:
            self.assertTrue(
                parse(Grammar, sentence.split()),
                'Expected to parse "{}", but failed.'.format(
                    sentence
                )
            )

    def test_invalid_sentences(self):
        bad_sentences = [
            # Unrecognized symbol
            "unrecognized puq"

            # Incorrect structure
            "qIp qIp"
        ]
        for sentence in bad_sentences:
            self.assertFalse(
                parse(Grammar, sentence.split()),
                'Unexpectedly parsed "{}"'.format(
                    sentence,
                )
            )
