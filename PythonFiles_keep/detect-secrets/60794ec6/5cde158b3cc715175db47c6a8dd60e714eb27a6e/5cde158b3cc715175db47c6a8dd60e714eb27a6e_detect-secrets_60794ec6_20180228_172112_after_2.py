#!/usr/bin/python
from __future__ import absolute_import

import argparse


class ParserBuilder(object):

    def __init__(self):
        self.parser = argparse.ArgumentParser()
        self.add_default_arguments()

    def add_default_arguments(self):
        self.add_custom_limits()
        self.add_opt_out_plugins_options()
        self.add_verbosity_argument()

    def add_custom_limits(self):
        self.parser.add_argument(
            '--base64-limit',
            type=argparse_minmax_type,
            nargs=1,
            default=[4.5],
            help=(
                'Sets the entropy limit for base64 strings. '
                'Value must be between 0.0 and 8.0.'
            ),
        )
        self.parser.add_argument(
            '--hex-limit',
            type=argparse_minmax_type,
            nargs=1,
            default=[3],
            help=(
                'Sets the entropy limit for hex strings. '
                'Value must be between 0.0 and 8.0.'
            ),
        )
        return self

    def add_opt_out_plugins_options(self):
        self.parser.add_argument(
            '--no-private-key-scan',
            action='store_true',
            help='Disables scanning for private keys.',
        )
        return self

    def add_verbosity_argument(self):
        self.parser.add_argument(
            '-v',
            '--verbose',
            action='count',
            help='Verbose mode.',
        )
        return self

    def add_filenames_argument(self):
        self.parser.add_argument('filenames', nargs='*', help='Filenames to check')
        return self

    def add_initialize_baseline_argument(self):
        self.parser.add_argument(
            '--scan',
            nargs='?',
            const='.',
            help=(
                'Scans the entire codebase and outputs a snapshot of '
                'currently identified secrets.'
            ),
            metavar='DIR_TO_SCAN',
        )

        # Pairing `--exclude` with `--scan` because it's only used for the initialization.
        # The pre-commit hook framework already has an `exclude` option that can be used instead.
        self.parser.add_argument(
            '--exclude',
            nargs=1,
            help='Pass in regex to specify ignored paths during initialization scan.'
        )

        return self

    def add_set_baseline_argument(self):
        self.parser.add_argument(
            '--baseline',
            nargs=1,
            default=[''],
            help='Sets a baseline for explicitly ignored secrets, generated by `--initialize`.',
        )
        return self

    def add_initialize_server_argument(self):
        self.parser.add_argument(
            '--initialize',
            nargs='?',
            const='repos.yaml',
            help='Initializes tracked repositories based on a supplied repos.yaml.',
            metavar='CUSTOM_REPO_CONFIG_FILE',
        )

        return self

    def add_scan_repo_argument(self):
        self.parser.add_argument(
            '--scan-repo',
            nargs=1,
            help='Specify the name of the repo (or path, if local) to scan.',
            metavar='REPO_TO_SCAN',
        )

        return self

    def add_config_file_argument(self):
        self.parser.add_argument(
            '--config-file',
            nargs=1,
            help='Path to a config.yaml which will be used to initialize defaults and plugins.',
        )

        return self

    def add_add_repo_argument(self):
        self.parser.add_argument(
            '--add-repo',
            nargs=1,
            help=(
                'Enables the addition of individual tracked git repos, without including it in the config file. '
                'Takes in a git URL (or path to repo, if local) as an argument. '
                'Newly tracked repos will store HEAD as the last scanned commit sha. '
                'Also uses config file specified by `--config-file` to initialize default plugins and other settings.'
            ),
            metavar='REPO_TO_ADD'
        )

        return self

    def add_local_repo_flag(self):
        self.parser.add_argument(
            '-L',
            '--local',
            action='store_true',
            help=(
                'Allows scanner to be pointed to locally stored repos (instead of git cloning). '
                'Use with --scan-repo or --add-repo.'
            ),
        )

        return self

    def add_s3_config_file_argument(self):
        self.parser.add_argument(
            '--s3-config-file',
            nargs=1,
            help='Specify keys for storing files on Amazon S3.',
            metavar='S3_CONFIG_FILE',
        )

        return self

    def parse_args(self, argv):
        return self.parser.parse_args(argv)


def argparse_minmax_type(string):  # pragma: no cover
    """Custom type for argparse to enforce value limits"""
    value = float(string)
    if value < 0 or value > 8:
        raise argparse.ArgumentTypeError(
            '%s must be between 0.0 and 8.0' % string)

    return value
