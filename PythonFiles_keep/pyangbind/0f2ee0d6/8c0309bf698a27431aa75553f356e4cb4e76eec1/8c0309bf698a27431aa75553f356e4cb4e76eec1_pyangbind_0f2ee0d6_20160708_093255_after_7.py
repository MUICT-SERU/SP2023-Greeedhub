
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
class yc_parent_presence__parent(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module presence - based on the path /parent. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  _pyangbind_elements = {}

  

class presence(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module presence - based on the path /presence. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A test module
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__parent',)

  _yang_name = 'presence'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__parent = YANGDynClass(base=yc_parent_presence__parent, is_container='container', yang_name="parent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://rob.sh/yang/test/presence', defining_module='presence', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_parent(self):
    """
    Getter method for parent, mapped from YANG variable /parent (container)
    """
    return self.__parent
      
  def _set_parent(self, v, load=False):
    """
    Setter method for parent, mapped from YANG variable /parent (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_parent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_parent() directly.
    """
    try:
      t = YANGDynClass(v,base=yc_parent_presence__parent, is_container='container', yang_name="parent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://rob.sh/yang/test/presence', defining_module='presence', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """parent must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_parent_presence__parent, is_container='container', yang_name="parent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://rob.sh/yang/test/presence', defining_module='presence', yang_type='container', is_config=True)""",
        })

    self.__parent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_parent(self):
    self.__parent = YANGDynClass(base=yc_parent_presence__parent, is_container='container', yang_name="parent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://rob.sh/yang/test/presence', defining_module='presence', yang_type='container', is_config=True)

  parent = property(_get_parent, _set_parent)


  _pyangbind_elements = {'parent': parent, }


