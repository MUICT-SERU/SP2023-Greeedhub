# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VBBinaryLensingLibrary', [dirname(__file__)])
        except ImportError:
            import _VBBinaryLensingLibrary
            return _VBBinaryLensingLibrary
        if fp is not None:
            try:
                _mod = imp.load_module('_VBBinaryLensingLibrary', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _VBBinaryLensingLibrary = swig_import_helper()
    del swig_import_helper
else:
    import _VBBinaryLensingLibrary
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _VBBinaryLensingLibrary.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _VBBinaryLensingLibrary.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _VBBinaryLensingLibrary.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _VBBinaryLensingLibrary.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _VBBinaryLensingLibrary.doubleArray_frompointer
    if _newclass:
        frompointer = staticmethod(_VBBinaryLensingLibrary.doubleArray_frompointer)
doubleArray_swigregister = _VBBinaryLensingLibrary.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _VBBinaryLensingLibrary.doubleArray_frompointer(t)
doubleArray_frompointer = _VBBinaryLensingLibrary.doubleArray_frompointer


_VBBinaryLensingLibrary._NP_swigconstant(_VBBinaryLensingLibrary)
_NP = _VBBinaryLensingLibrary._NP
class VBBinaryLensing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VBBinaryLensing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VBBinaryLensing, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Tol"] = _VBBinaryLensingLibrary.VBBinaryLensing_Tol_set
    __swig_getmethods__["Tol"] = _VBBinaryLensingLibrary.VBBinaryLensing_Tol_get
    if _newclass:
        Tol = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_Tol_get, _VBBinaryLensingLibrary.VBBinaryLensing_Tol_set)
    __swig_setmethods__["satellite"] = _VBBinaryLensingLibrary.VBBinaryLensing_satellite_set
    __swig_getmethods__["satellite"] = _VBBinaryLensingLibrary.VBBinaryLensing_satellite_get
    if _newclass:
        satellite = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_satellite_get, _VBBinaryLensingLibrary.VBBinaryLensing_satellite_set)
    __swig_setmethods__["parallaxsystem"] = _VBBinaryLensingLibrary.VBBinaryLensing_parallaxsystem_set
    __swig_getmethods__["parallaxsystem"] = _VBBinaryLensingLibrary.VBBinaryLensing_parallaxsystem_get
    if _newclass:
        parallaxsystem = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_parallaxsystem_get, _VBBinaryLensingLibrary.VBBinaryLensing_parallaxsystem_set)
    __swig_setmethods__["nsat"] = _VBBinaryLensingLibrary.VBBinaryLensing_nsat_set
    __swig_getmethods__["nsat"] = _VBBinaryLensingLibrary.VBBinaryLensing_nsat_get
    if _newclass:
        nsat = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_nsat_get, _VBBinaryLensingLibrary.VBBinaryLensing_nsat_set)
    __swig_setmethods__["y_1"] = _VBBinaryLensingLibrary.VBBinaryLensing_y_1_set
    __swig_getmethods__["y_1"] = _VBBinaryLensingLibrary.VBBinaryLensing_y_1_get
    if _newclass:
        y_1 = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_y_1_get, _VBBinaryLensingLibrary.VBBinaryLensing_y_1_set)
    __swig_setmethods__["y_2"] = _VBBinaryLensingLibrary.VBBinaryLensing_y_2_set
    __swig_getmethods__["y_2"] = _VBBinaryLensingLibrary.VBBinaryLensing_y_2_get
    if _newclass:
        y_2 = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_y_2_get, _VBBinaryLensingLibrary.VBBinaryLensing_y_2_set)
    __swig_setmethods__["av"] = _VBBinaryLensingLibrary.VBBinaryLensing_av_set
    __swig_getmethods__["av"] = _VBBinaryLensingLibrary.VBBinaryLensing_av_get
    if _newclass:
        av = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_av_get, _VBBinaryLensingLibrary.VBBinaryLensing_av_set)

    def PlotCrit(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_PlotCrit(self, arg2, arg3)

    def PrintCau(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_PrintCau(self, arg2, arg3)

    def BinaryMag0(self, *args):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinaryMag0(self, *args)

    def BinaryMag(self, *args):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinaryMag(self, *args)

    def BinaryMagDark(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinaryMagDark(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

    def SetObjectCoordinates(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_SetObjectCoordinates(self, arg2, arg3)

    def PSPLCurve(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_PSPLCurve(self, arg2, arg3)

    def PSPLParallaxCurve(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_PSPLParallaxCurve(self, arg2, arg3)

    def ESPLCurve(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_ESPLCurve(self, arg2, arg3)

    def ESPLParallaxCurve(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_ESPLParallaxCurve(self, arg2, arg3)

    def BinaryLightCurve(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinaryLightCurve(self, arg2, arg3)

    def BinaryLightCurveW(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinaryLightCurveW(self, arg2, arg3)

    def BinaryLightCurveParallax(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinaryLightCurveParallax(self, arg2, arg3)

    def BinaryLightCurveOrbital(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinaryLightCurveOrbital(self, arg2, arg3)

    def BinSourceMag(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinSourceMag(self, arg2, arg3)

    def BinSourceParallaxMag(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinSourceParallaxMag(self, arg2, arg3)

    def BinSourceXallarapMag(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinSourceXallarapMag(self, arg2, arg3)

    def __init__(self):
        this = _VBBinaryLensingLibrary.new_VBBinaryLensing()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete_VBBinaryLensing
    __del__ = lambda self: None
VBBinaryLensing_swigregister = _VBBinaryLensingLibrary.VBBinaryLensing_swigregister
VBBinaryLensing_swigregister(VBBinaryLensing)

class annulus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, annulus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, annulus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bin"] = _VBBinaryLensingLibrary.annulus_bin_set
    __swig_getmethods__["bin"] = _VBBinaryLensingLibrary.annulus_bin_get
    if _newclass:
        bin = _swig_property(_VBBinaryLensingLibrary.annulus_bin_get, _VBBinaryLensingLibrary.annulus_bin_set)
    __swig_setmethods__["cum"] = _VBBinaryLensingLibrary.annulus_cum_set
    __swig_getmethods__["cum"] = _VBBinaryLensingLibrary.annulus_cum_get
    if _newclass:
        cum = _swig_property(_VBBinaryLensingLibrary.annulus_cum_get, _VBBinaryLensingLibrary.annulus_cum_set)
    __swig_setmethods__["Mag"] = _VBBinaryLensingLibrary.annulus_Mag_set
    __swig_getmethods__["Mag"] = _VBBinaryLensingLibrary.annulus_Mag_get
    if _newclass:
        Mag = _swig_property(_VBBinaryLensingLibrary.annulus_Mag_get, _VBBinaryLensingLibrary.annulus_Mag_set)
    __swig_setmethods__["err"] = _VBBinaryLensingLibrary.annulus_err_set
    __swig_getmethods__["err"] = _VBBinaryLensingLibrary.annulus_err_get
    if _newclass:
        err = _swig_property(_VBBinaryLensingLibrary.annulus_err_get, _VBBinaryLensingLibrary.annulus_err_set)
    __swig_setmethods__["f"] = _VBBinaryLensingLibrary.annulus_f_set
    __swig_getmethods__["f"] = _VBBinaryLensingLibrary.annulus_f_get
    if _newclass:
        f = _swig_property(_VBBinaryLensingLibrary.annulus_f_get, _VBBinaryLensingLibrary.annulus_f_set)
    __swig_setmethods__["nim"] = _VBBinaryLensingLibrary.annulus_nim_set
    __swig_getmethods__["nim"] = _VBBinaryLensingLibrary.annulus_nim_get
    if _newclass:
        nim = _swig_property(_VBBinaryLensingLibrary.annulus_nim_get, _VBBinaryLensingLibrary.annulus_nim_set)
    __swig_setmethods__["prev"] = _VBBinaryLensingLibrary.annulus_prev_set
    __swig_getmethods__["prev"] = _VBBinaryLensingLibrary.annulus_prev_get
    if _newclass:
        prev = _swig_property(_VBBinaryLensingLibrary.annulus_prev_get, _VBBinaryLensingLibrary.annulus_prev_set)
    __swig_setmethods__["next"] = _VBBinaryLensingLibrary.annulus_next_set
    __swig_getmethods__["next"] = _VBBinaryLensingLibrary.annulus_next_get
    if _newclass:
        next = _swig_property(_VBBinaryLensingLibrary.annulus_next_get, _VBBinaryLensingLibrary.annulus_next_set)

    def __init__(self):
        this = _VBBinaryLensingLibrary.new_annulus()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete_annulus
    __del__ = lambda self: None
annulus_swigregister = _VBBinaryLensingLibrary.annulus_swigregister
annulus_swigregister(annulus)

class _theta(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _theta, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _theta, name)
    __repr__ = _swig_repr
    __swig_setmethods__["th"] = _VBBinaryLensingLibrary._theta_th_set
    __swig_getmethods__["th"] = _VBBinaryLensingLibrary._theta_th_get
    if _newclass:
        th = _swig_property(_VBBinaryLensingLibrary._theta_th_get, _VBBinaryLensingLibrary._theta_th_set)
    __swig_setmethods__["maxerr"] = _VBBinaryLensingLibrary._theta_maxerr_set
    __swig_getmethods__["maxerr"] = _VBBinaryLensingLibrary._theta_maxerr_get
    if _newclass:
        maxerr = _swig_property(_VBBinaryLensingLibrary._theta_maxerr_get, _VBBinaryLensingLibrary._theta_maxerr_set)
    __swig_setmethods__["Mag"] = _VBBinaryLensingLibrary._theta_Mag_set
    __swig_getmethods__["Mag"] = _VBBinaryLensingLibrary._theta_Mag_get
    if _newclass:
        Mag = _swig_property(_VBBinaryLensingLibrary._theta_Mag_get, _VBBinaryLensingLibrary._theta_Mag_set)
    __swig_setmethods__["errworst"] = _VBBinaryLensingLibrary._theta_errworst_set
    __swig_getmethods__["errworst"] = _VBBinaryLensingLibrary._theta_errworst_get
    if _newclass:
        errworst = _swig_property(_VBBinaryLensingLibrary._theta_errworst_get, _VBBinaryLensingLibrary._theta_errworst_set)
    __swig_setmethods__["prev"] = _VBBinaryLensingLibrary._theta_prev_set
    __swig_getmethods__["prev"] = _VBBinaryLensingLibrary._theta_prev_get
    if _newclass:
        prev = _swig_property(_VBBinaryLensingLibrary._theta_prev_get, _VBBinaryLensingLibrary._theta_prev_set)
    __swig_setmethods__["next"] = _VBBinaryLensingLibrary._theta_next_set
    __swig_getmethods__["next"] = _VBBinaryLensingLibrary._theta_next_get
    if _newclass:
        next = _swig_property(_VBBinaryLensingLibrary._theta_next_get, _VBBinaryLensingLibrary._theta_next_set)

    def __init__(self, arg2):
        this = _VBBinaryLensingLibrary.new__theta(arg2)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete__theta
    __del__ = lambda self: None
_theta_swigregister = _VBBinaryLensingLibrary._theta_swigregister
_theta_swigregister(_theta)

class _thetas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _thetas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _thetas, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first"] = _VBBinaryLensingLibrary._thetas_first_set
    __swig_getmethods__["first"] = _VBBinaryLensingLibrary._thetas_first_get
    if _newclass:
        first = _swig_property(_VBBinaryLensingLibrary._thetas_first_get, _VBBinaryLensingLibrary._thetas_first_set)
    __swig_setmethods__["last"] = _VBBinaryLensingLibrary._thetas_last_set
    __swig_getmethods__["last"] = _VBBinaryLensingLibrary._thetas_last_get
    if _newclass:
        last = _swig_property(_VBBinaryLensingLibrary._thetas_last_get, _VBBinaryLensingLibrary._thetas_last_set)
    __swig_setmethods__["length"] = _VBBinaryLensingLibrary._thetas_length_set
    __swig_getmethods__["length"] = _VBBinaryLensingLibrary._thetas_length_get
    if _newclass:
        length = _swig_property(_VBBinaryLensingLibrary._thetas_length_get, _VBBinaryLensingLibrary._thetas_length_set)

    def __init__(self):
        this = _VBBinaryLensingLibrary.new__thetas()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete__thetas
    __del__ = lambda self: None

    def insert(self, arg2):
        return _VBBinaryLensingLibrary._thetas_insert(self, arg2)
_thetas_swigregister = _VBBinaryLensingLibrary._thetas_swigregister
_thetas_swigregister(_thetas)

class complex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, complex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, complex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["re"] = _VBBinaryLensingLibrary.complex_re_set
    __swig_getmethods__["re"] = _VBBinaryLensingLibrary.complex_re_get
    if _newclass:
        re = _swig_property(_VBBinaryLensingLibrary.complex_re_get, _VBBinaryLensingLibrary.complex_re_set)
    __swig_setmethods__["im"] = _VBBinaryLensingLibrary.complex_im_set
    __swig_getmethods__["im"] = _VBBinaryLensingLibrary.complex_im_get
    if _newclass:
        im = _swig_property(_VBBinaryLensingLibrary.complex_im_get, _VBBinaryLensingLibrary.complex_im_set)

    def __init__(self, *args):
        this = _VBBinaryLensingLibrary.new_complex(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete_complex
    __del__ = lambda self: None
complex_swigregister = _VBBinaryLensingLibrary.complex_swigregister
complex_swigregister(complex)

class _point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x1"] = _VBBinaryLensingLibrary._point_x1_set
    __swig_getmethods__["x1"] = _VBBinaryLensingLibrary._point_x1_get
    if _newclass:
        x1 = _swig_property(_VBBinaryLensingLibrary._point_x1_get, _VBBinaryLensingLibrary._point_x1_set)
    __swig_setmethods__["x2"] = _VBBinaryLensingLibrary._point_x2_set
    __swig_getmethods__["x2"] = _VBBinaryLensingLibrary._point_x2_get
    if _newclass:
        x2 = _swig_property(_VBBinaryLensingLibrary._point_x2_get, _VBBinaryLensingLibrary._point_x2_set)
    __swig_setmethods__["parab"] = _VBBinaryLensingLibrary._point_parab_set
    __swig_getmethods__["parab"] = _VBBinaryLensingLibrary._point_parab_get
    if _newclass:
        parab = _swig_property(_VBBinaryLensingLibrary._point_parab_get, _VBBinaryLensingLibrary._point_parab_set)
    __swig_setmethods__["ds"] = _VBBinaryLensingLibrary._point_ds_set
    __swig_getmethods__["ds"] = _VBBinaryLensingLibrary._point_ds_get
    if _newclass:
        ds = _swig_property(_VBBinaryLensingLibrary._point_ds_get, _VBBinaryLensingLibrary._point_ds_set)
    __swig_setmethods__["dJ"] = _VBBinaryLensingLibrary._point_dJ_set
    __swig_getmethods__["dJ"] = _VBBinaryLensingLibrary._point_dJ_get
    if _newclass:
        dJ = _swig_property(_VBBinaryLensingLibrary._point_dJ_get, _VBBinaryLensingLibrary._point_dJ_set)
    __swig_setmethods__["d"] = _VBBinaryLensingLibrary._point_d_set
    __swig_getmethods__["d"] = _VBBinaryLensingLibrary._point_d_get
    if _newclass:
        d = _swig_property(_VBBinaryLensingLibrary._point_d_get, _VBBinaryLensingLibrary._point_d_set)
    __swig_setmethods__["theta"] = _VBBinaryLensingLibrary._point_theta_set
    __swig_getmethods__["theta"] = _VBBinaryLensingLibrary._point_theta_get
    if _newclass:
        theta = _swig_property(_VBBinaryLensingLibrary._point_theta_get, _VBBinaryLensingLibrary._point_theta_set)

    def __init__(self, arg2, arg3, arg4):
        this = _VBBinaryLensingLibrary.new__point(arg2, arg3, arg4)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["next"] = _VBBinaryLensingLibrary._point_next_set
    __swig_getmethods__["next"] = _VBBinaryLensingLibrary._point_next_get
    if _newclass:
        next = _swig_property(_VBBinaryLensingLibrary._point_next_get, _VBBinaryLensingLibrary._point_next_set)
    __swig_setmethods__["prev"] = _VBBinaryLensingLibrary._point_prev_set
    __swig_getmethods__["prev"] = _VBBinaryLensingLibrary._point_prev_get
    if _newclass:
        prev = _swig_property(_VBBinaryLensingLibrary._point_prev_get, _VBBinaryLensingLibrary._point_prev_set)

    def __sub__(self, arg2):
        return _VBBinaryLensingLibrary._point___sub__(self, arg2)
    __swig_destroy__ = _VBBinaryLensingLibrary.delete__point
    __del__ = lambda self: None
_point_swigregister = _VBBinaryLensingLibrary._point_swigregister
_point_swigregister(_point)

class _curve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _curve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _curve, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _VBBinaryLensingLibrary._curve_length_set
    __swig_getmethods__["length"] = _VBBinaryLensingLibrary._curve_length_get
    if _newclass:
        length = _swig_property(_VBBinaryLensingLibrary._curve_length_get, _VBBinaryLensingLibrary._curve_length_set)
    __swig_setmethods__["first"] = _VBBinaryLensingLibrary._curve_first_set
    __swig_getmethods__["first"] = _VBBinaryLensingLibrary._curve_first_get
    if _newclass:
        first = _swig_property(_VBBinaryLensingLibrary._curve_first_get, _VBBinaryLensingLibrary._curve_first_set)
    __swig_setmethods__["last"] = _VBBinaryLensingLibrary._curve_last_set
    __swig_getmethods__["last"] = _VBBinaryLensingLibrary._curve_last_get
    if _newclass:
        last = _swig_property(_VBBinaryLensingLibrary._curve_last_get, _VBBinaryLensingLibrary._curve_last_set)
    __swig_setmethods__["next"] = _VBBinaryLensingLibrary._curve_next_set
    __swig_getmethods__["next"] = _VBBinaryLensingLibrary._curve_next_get
    if _newclass:
        next = _swig_property(_VBBinaryLensingLibrary._curve_next_get, _VBBinaryLensingLibrary._curve_next_set)
    __swig_setmethods__["prev"] = _VBBinaryLensingLibrary._curve_prev_set
    __swig_getmethods__["prev"] = _VBBinaryLensingLibrary._curve_prev_get
    if _newclass:
        prev = _swig_property(_VBBinaryLensingLibrary._curve_prev_get, _VBBinaryLensingLibrary._curve_prev_set)
    __swig_setmethods__["partneratstart"] = _VBBinaryLensingLibrary._curve_partneratstart_set
    __swig_getmethods__["partneratstart"] = _VBBinaryLensingLibrary._curve_partneratstart_get
    if _newclass:
        partneratstart = _swig_property(_VBBinaryLensingLibrary._curve_partneratstart_get, _VBBinaryLensingLibrary._curve_partneratstart_set)
    __swig_setmethods__["partneratend"] = _VBBinaryLensingLibrary._curve_partneratend_set
    __swig_getmethods__["partneratend"] = _VBBinaryLensingLibrary._curve_partneratend_get
    if _newclass:
        partneratend = _swig_property(_VBBinaryLensingLibrary._curve_partneratend_get, _VBBinaryLensingLibrary._curve_partneratend_set)
    __swig_setmethods__["parabstart"] = _VBBinaryLensingLibrary._curve_parabstart_set
    __swig_getmethods__["parabstart"] = _VBBinaryLensingLibrary._curve_parabstart_get
    if _newclass:
        parabstart = _swig_property(_VBBinaryLensingLibrary._curve_parabstart_get, _VBBinaryLensingLibrary._curve_parabstart_set)

    def __init__(self, *args):
        this = _VBBinaryLensingLibrary.new__curve(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete__curve
    __del__ = lambda self: None

    def divide(self, arg2):
        return _VBBinaryLensingLibrary._curve_divide(self, arg2)

    def drop(self, arg2):
        return _VBBinaryLensingLibrary._curve_drop(self, arg2)

    def append(self, *args):
        return _VBBinaryLensingLibrary._curve_append(self, *args)

    def prepend(self, arg2, arg3):
        return _VBBinaryLensingLibrary._curve_prepend(self, arg2, arg3)

    def join(self, arg2):
        return _VBBinaryLensingLibrary._curve_join(self, arg2)

    def joinbefore(self, arg2):
        return _VBBinaryLensingLibrary._curve_joinbefore(self, arg2)

    def reverse(self):
        return _VBBinaryLensingLibrary._curve_reverse(self)

    def closest(self, arg2, arg3):
        return _VBBinaryLensingLibrary._curve_closest(self, arg2, arg3)

    def closest2(self, arg2, arg3):
        return _VBBinaryLensingLibrary._curve_closest2(self, arg2, arg3)

    def complement(self, arg2, arg3, arg4, arg5):
        return _VBBinaryLensingLibrary._curve_complement(self, arg2, arg3, arg4, arg5)
_curve_swigregister = _VBBinaryLensingLibrary._curve_swigregister
_curve_swigregister(_curve)

class _sols(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _sols, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _sols, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _VBBinaryLensingLibrary._sols_length_set
    __swig_getmethods__["length"] = _VBBinaryLensingLibrary._sols_length_get
    if _newclass:
        length = _swig_property(_VBBinaryLensingLibrary._sols_length_get, _VBBinaryLensingLibrary._sols_length_set)
    __swig_setmethods__["first"] = _VBBinaryLensingLibrary._sols_first_set
    __swig_getmethods__["first"] = _VBBinaryLensingLibrary._sols_first_get
    if _newclass:
        first = _swig_property(_VBBinaryLensingLibrary._sols_first_get, _VBBinaryLensingLibrary._sols_first_set)
    __swig_setmethods__["last"] = _VBBinaryLensingLibrary._sols_last_set
    __swig_getmethods__["last"] = _VBBinaryLensingLibrary._sols_last_get
    if _newclass:
        last = _swig_property(_VBBinaryLensingLibrary._sols_last_get, _VBBinaryLensingLibrary._sols_last_set)

    def __init__(self):
        this = _VBBinaryLensingLibrary.new__sols()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete__sols
    __del__ = lambda self: None

    def drop(self, arg2):
        return _VBBinaryLensingLibrary._sols_drop(self, arg2)

    def append(self, arg2):
        return _VBBinaryLensingLibrary._sols_append(self, arg2)

    def prepend(self, arg2):
        return _VBBinaryLensingLibrary._sols_prepend(self, arg2)

    def join(self, arg2):
        return _VBBinaryLensingLibrary._sols_join(self, arg2)
_sols_swigregister = _VBBinaryLensingLibrary._sols_swigregister
_sols_swigregister(_sols)


_VBBinaryLensingLibrary.MR_swigconstant(_VBBinaryLensingLibrary)
MR = _VBBinaryLensingLibrary.MR

_VBBinaryLensingLibrary.MT_swigconstant(_VBBinaryLensingLibrary)
MT = _VBBinaryLensingLibrary.MT

_VBBinaryLensingLibrary.MAXIT_swigconstant(_VBBinaryLensingLibrary)
MAXIT = _VBBinaryLensingLibrary.MAXIT

_VBBinaryLensingLibrary.MAXM_swigconstant(_VBBinaryLensingLibrary)
MAXM = _VBBinaryLensingLibrary.MAXM

def rf(x, y, z):
    return _VBBinaryLensingLibrary.rf(x, y, z)
rf = _VBBinaryLensingLibrary.rf

def rd(x, y, z):
    return _VBBinaryLensingLibrary.rd(x, y, z)
rd = _VBBinaryLensingLibrary.rd

def rj(x, y, z, p):
    return _VBBinaryLensingLibrary.rj(x, y, z, p)
rj = _VBBinaryLensingLibrary.rj

def rc(x, y):
    return _VBBinaryLensingLibrary.rc(x, y)
rc = _VBBinaryLensingLibrary.rc

def ellf(phi, ak):
    return _VBBinaryLensingLibrary.ellf(phi, ak)
ellf = _VBBinaryLensingLibrary.ellf

def elle(phi, ak):
    return _VBBinaryLensingLibrary.elle(phi, ak)
elle = _VBBinaryLensingLibrary.elle

def ellpi(phi, en, ak):
    return _VBBinaryLensingLibrary.ellpi(phi, en, ak)
ellpi = _VBBinaryLensingLibrary.ellpi
# This file is compatible with both classic and new-style classes.


