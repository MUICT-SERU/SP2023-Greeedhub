"""
mfhfb module.  Contains the ModflowHfb class. Note that the user can access
the ModflowHfb class as `flopy.modflow.ModflowHfb`.

Additional information for this MODFLOW package can be found at the `Online
MODFLOW Guide
<http://water.usgs.gov/ogw/modflow/MODFLOW-2005-Guide/index.html?hfb6.htm>`_.

"""
from flopy.mbase import Package
from numpy import atleast_2d
from flopy.modflow.mfparbc import ModflowParBc as mfparbc


class ModflowHfb(Package):
    """
    MODFLOW HFB6 - Horizontal Flow Barrier Package
    
    Parameters
    ----------
    model : model object
        The model object (of type: class:`flopy.modflow.mf.Modflow`) to 
        which this package will be added.
    nphfb : int
        Number of horizontal-flow barrier parameters. Note that for an HFB 
        parameter to have an effect in the simulation, it must be defined 
        and made active using NACTHFB to have an effect in the simulation 
        (default is 0).
    mxfb : int
        Maximum number of horizontal-flow barrier barriers that will be 
        defined using parameters (default is 0).
    nhfbnp: int
        Number of horizontal-flow barriers not defined by parameters. This 
        is calculated automatically by FloPy based on the information in
        layer_row_column_data (default is 0).
    layer_row_column_data : list of records
        In its most general form, this is a list of horizontal-flow 
        barrier records. A barrier is conceptualized as being located on 
        the boundary between two adjacent finite difference cells in the 
        same layer. The innermost list is the layer, row1, column1, row2, 
        column2, and hydrologic characteristics for a single hfb between
        the cells. The hydraulic characteristic is the barrier hydraulic 
        conductivity divided by the width of the horizontal-flow barrier.
        This gives the form of
            lrcrch = [
                      [lay, row1, col1, row2, col2, hydchr],
                      [lay, row1, col1, row2, col2, hydchr],
                      [lay, row1, col1, row2, col2, hydchr],
                     ].
        Note that the variable is called layer_row_column_data, although
        it describes layer_row_column_row_column_data (default is None).
    nacthfb : int
        The number of active horizontal-flow barrier parameters 
        (default is 0).
    no_print : boolean
        When True or 1, a list of horizontal flow barriers will not be 
        written to the Listing File (default is False)
    options : list of strings
        Package options (default is None).
    extension : string
        Filename extension (default is 'hfb').
    unitnumber : int
        File unit number (default is 17).


    Attributes
    ----------

    Methods
    -------

    See Also
    --------

    Notes
    -----
    Uses zero-based indexing for lay, row, col. 
    Only programmed to work with horizontal-flow barriers not defined by 
    parameters; may need work for other options.

    Examples
    --------
    import flopy
    m = flopy.modflow.Modflow()
    lrcrch = [[0, 10, 4, 10, 5, 0.01]]
    hfb = flopy.modflow.ModflowHfb(m, layer_row_column_data=lrcrch)

    """

    def __init__(self, model, nphfb=0, mxfb=0, nhfbnp=0,
                 layer_row_column_data=None, nacthfb=0, no_print=False,
                 options=None, extension='hfb', unitnumber=17):
        Package.__init__(self, model, extension, 'HFB6',
                         unitnumber)  # Call ancestor's init to set self.parent, extension, name and unit number
        self.heading = '# HFB for MODFLOW, generated by Flopy.'
        self.url = 'hfb6.htm'

        self.nphfb = nphfb
        self.mxfb = mxfb

        if layer_row_column_data is None:
            raise Exception('Failed to specify layer_row_column_data.')

        self.layer_row_column_data = layer_row_column_data

        if (layer_row_column_data is not None):
            for a in layer_row_column_data:
                a = atleast_2d(a)
                nr, nc = a.shape
                assert nc == 6, 'layer_row_column_data must have 6 columns. \nEntry: ' + str(nc)
                self.nhfbnp = len(layer_row_column_data)

        self.nacthfb = nacthfb

        self.no_print = no_print
        self.np = 0
        if options is None:
            options = []
        if self.no_print:
            options.append('NOPRINT')
        self.options = options
        self.parent.add_package(self)

    def __repr__(self):
        return 'HFB package class'

    def ncells(self):
        # Returns the maximum number of cell pairs that have horizontal flow barriers (developed for MT3DMS SSM package)
        return self.nhfbnp

    def write_file(self):
        f_hfb = open(self.fn_path, 'w')
        f_hfb.write('%s\n' % self.heading)
        f_hfb.write('%9i %9i %9i' % (self.nphfb, self.mxfb, self.nhfbnp))
        for option in self.options:
            f_hfb.write('  {}'.format(option))
        f_hfb.write('\n')
        for a in self.layer_row_column_data:
            f_hfb.write('%9i %9i %9i %9i %9i %13.6e' % (a[0] + 1, a[1] + 1, a[2] + 1, a[3] + 1, a[4] + 1, a[5]))
            f_hfb.write('\n')
        f_hfb.write('%9i' % (self.nacthfb))
        f_hfb.close()

    @staticmethod
    def get_empty(ncells=0, aux_names=None):
        # get an empty recaray that correponds to dtype
        dtype = ModflowHfb.get_default_dtype()
        if aux_names is not None:
            dtype = Package.add_to_dtype(dtype, aux_names, np.float32)
        d = np.zeros((ncells, len(dtype)), dtype=dtype)
        d[:, :] = -1.0E+10
        return np.core.records.fromarrays(d.transpose(), dtype=dtype)

    @staticmethod
    def get_default_dtype():
        dtype = np.dtype([("k", np.int),
                          ("irow1", np.int), ("icol1", np.int),
                          ("irow2", np.int), ("icol2", np.int),
                          ("hydchr", np.float32)])
        return dtype


    @staticmethod
    def load(f, model, ext_unit_dict=None):
        """
        Load an existing package.

        Parameters
        ----------
        f : filename or file handle
            File to load.
        model : model object
            The model object (of type: class:`flopy.modflow.mf.Modflow`) 
            to which this package will be added.

        Returns
        -------
        hfb : ModflowHfb object

        Examples
        --------
        import flopy
        m = flopy.modflow.Modflow()
        hfb = flopy.modflow.ModflowHfb.load('test.hfb', m)

        """
        # if type(f) is not file:
        # filename = f
        #     f = open(filename, 'r')
        # # dataset 0 -- header
        # while True:
        #     line = f.readline()
        #     if line[0] != '#':
        #         break
        # # dataset 1
        # t = line.strip().split()
        # nphfb = int(t[0])
        # mxfb = int(t[1])
        # nhfbnp = int(t[2])
        # # --check for no-print suppressor
        # options = []
        # naux = 0
        # if len(t) > 2:
        #     for toption in t[3:-1]:
        #         if toption.lower() is 'noprint':
        #             options.append(toption)
        #         elif 'aux' in toption.lower():
        #             naux += 1
        #             options.append(toption)
        # # dataset 4
        # layer_row_column_data = []
        # current = []
        # nitems = 6
        # for ihfb in xrange(nhfbnp):
        #     line = f.readline()
        #     t = line.strip().split()
        #     bnd = []
        #     for jdx in xrange(nitems):
        #         if jdx < nitems-1:
        #             bnd.append(int(t[jdx]))
        #         else:
        #             bnd.append(float(t[jdx]))
        #     current.append(bnd)
        #     layer_row_column_data.append(current)
        # # dataset 5
        # line = f.readline()
        # t = line.strip().split()
        # nacthfb = int(t[0])
        #
        # hfb = ModflowHfb(model, nphfb=nphfb, mxfb=mxfb, nhfbnp=nhfbnp,
        #                 layer_row_column_data=layer_row_column_data,
        #                 nacthfb=nacthfb, options=options)
        # return hfb

        bc_pack_types = []

        if type(f) is not file:
            filename = f
            f = open(filename, 'r')
        #dataset 0 -- header
        while True:
            line = f.readline()
            if line[0] != '#':
                break
        # dataset 1
        t = line.strip().split()
        nphfb = int(t[0])
        mxfb = int(t[1])
        nhfbnp = int(t[2])
        #--check for no-print suppressor
        options = []
        naux = 0
        if len(t) > 2:
            for toption in t[3:-1]:
                if toption.lower() is 'noprint':
                    options.append(toption)
                elif 'aux' in toption.lower():
                    naux += 1
                    options.append(toption)
        #dataset 2a
        t = line.strip().split()
        ipakcb = 0
        try:
            if int(t[1]) != 0:
                ipakcb = 53
        except:
            pass
        options = []
        aux_names = []
        if len(t) > 2:
            it = 2
            while it < len(t):
                toption = t[it]
                print it, t[it]
                if toption.lower() is 'noprint':
                    options.append(toption)
                elif 'aux' in toption.lower():
                    options.append(' '.join(t[it:it + 2]))
                    aux_names.append(t[it + 1].lower())
                    it += 1
                it += 1
        #--data set 2
        if nphfb > 0:
            dt = ModflowHfb.get_empty(1, aux_names=aux_names).dtype
            pak_parms = mfparbc.load(f, nphfb, dt)



        #--set partype
        #  and read phiramp for modflow-nwt well package
        partype = ['hydchr']


        hfb = ModflowHfb(model, nphfb=nphfb, mxfb=mxfb, nhfbnp=nhfbnp,
                         layer_row_column_data=[],
                         nacthfb=nacthfb, options=options)
        return hfb
