"""Generate YANG Python Bindings from a YANG model.

(c) Rob Shakir (rob.shakir@bt.com, rjs@rob.sh) - 2015.

This module is tentatively licensed under the Apache licence.

"""

import optparse
import sys
import re
import string

from pyang import plugin
from pyang import statements

USED_TYPES = []

#class YANGParent():
#  name = str()
#  def __init__(self, n):
#    self.name = n
#
#class YANGContainer(YANGParent):
#  pass

# this is a hack solution, we need to fix this to have
# dynamic learning of types


## TODO:
## every datatype actually needs to be able to be undef or a value - default values should not exist
## so need to wrap each class in a wrapper that lets undef be set.
## this is to ensure that when we serialise the object to send over NETCONF or protobuf then we
## do not need 

## TODO:
## Rules can be implemented by having all _set* methods call a generic _obj_validate - this can
## be defined on a per-container basis, or just at the base of the module.
## When defined at the base of the module, then we need to call parent validate() methods for
## all sub-objects.

## TODO:
## we need to define dynamic types - so read through typedefs and then define new types.

## TODO:
## we have to handle unsafe names other than those with "-" in them -- which might mean that we
## rename some of the YANG module variables. for instance, we need to change 'global' which exists
## in the BGP model.

class_bool_map = {
  'false':  False,
  'False':  False,
  'true':    True,
  'True':    True,
}

class_map = {
  'boolean':        ("NullBoolean", class_bool_map),
  'uint8':        ("np.uint8", False),
  'uint16':        ("np.uint16", False),
  'uint32':        ("np.uint32", False),
  'string':        ("str", False),
  # we need to look at how to parse typedefs
  'inet:as-number':     ("int", False),
  'inet:ipv4-address':   ("str", False),
  'decimal64':       ("float", False),
  # more types to be added here
}

def safe_name(arg):
  """
    Make a leaf or container name safe for use in Python.
  """
  arg = arg.replace("-", "_")
  return arg

def pyang_plugin_init():
    plugin.register_plugin(BTPyClass())

class BTPyClass(plugin.PyangPlugin):
    def add_output_format(self, fmts):
        self.multiple_modules = True
        fmts['bt'] = self

    def emit(self, ctx, modules, fd):
        build_btclass(ctx, modules, fd)


def build_btclass(ctx, modules, fd):
  # numpy provides some elements of the classes datatypes
  fd.write("from operator import attrgetter\n")
  fd.write("import numpy as np\n\n")

  fd.write("""import collections

class YANGBool(int):
  __v = None
  def __init__(self):
    self.__v = None

  def __init__(self, v):
    if v not in [True, False, None]:
      raise TypeError, v
    self.__v = v


class YANGStr(string):
  __v = 

# using solution from http://stackoverflow.com/questions/3487434/overriding-append-method-after-inheriting-from-a-python-list
# to create a list type that can be restricted to a certain type - to support leaf-list.
class TypedList(collections.MutableSequence):
  def __init__(self, allowed_types, *args):
    self.allowed_types = type
    self.list = list()
    self.extend(list(args))

  def check(self, v):
    if not isinstance(self, allowed_types):
      raise TypeError, v

  def __len__(self): return len(self.list)

  def __getitem__(self,i): return self.list[i]

  def __delitem__(self,i): del self.list[i]

  def __setitem__(self, i, v):
    self.check(v)
    self.list[i] = v

  def insert(self, i, v):
    self.check(v)
    self.list.insert(i,v)

  def __str__(self):
    return str(self.list)

""")

  # we need to parse each module
  for module in modules:
    # we need to parse each sub-module
    mods = [module]
    for i in module.search('include'):
      subm = crx.get_module(i.arg)
      if subm is not None:
        mods.append(subm)

    # now walk the module+submodule list
    #for m in mods:
    #  # ignore augments, rpcs and notifications for the moment
    
    module_code = {}
    for m in mods:
      children = [ch for ch in module.i_children
            if ch.keyword in statements.data_definition_keywords]

      #root = YANGContainer(m.arg)
      get_children(fd, children, m, m)



def get_children(fd, i_children, module, parent, path=str()):
  used_types,elements = [],[]
  for ch in i_children:
    elements += get_element(fd, ch, module, parent, path+"/"+ch.arg)
  
  #for element in elements:
    #print element
  #  if element["class"] == "leaf" and not element["type"] in used_types:
  #    used_types.append(element["type"])

  if not path == "":
    fd.write("class yc_%s_%s(object):\n" % (parent.arg, path.replace("/", "_")))
  else:
    fd.write("class %s(object):\n" % parent.arg)
  fd.write("""  \"\"\"
   This class was auto-generated by the PythonClass plugin for PYANG
   from YANG module %s - based on the path %s.
   Each member element of the container is represented as a class
   variable - with a specific YANG type.
  \"\"\"\n"""  % (module.arg, (path if not path == "" else "/")))

  #elem_getter_required = []
  if len(elements) == 0:
    fd.write("  pass\n")
  else:
    for i in elements:
      if type(i["type"]) == type((1,1)):
        fd.write("  %s%s = %s(%s)\n" % ("__" if i["config"] else "", i["name"], i["type"][0], i["type"][1]))
      else:
        fd.write("  %s%s = %s(%s)\n" % ("__" if i["config"] else "", i["name"], i["type"], i["default"] if "default" in i.keys() and not i["default"] == None else ""))
      #if i["config"] == False:
      #  elem_getter_required.append(i["name"])

  #for e in elem_getter_required:
  #  fd.write("""  %s = property(attrgetter("%s"))\n""" % (re.sub("^_","",i["name"]), i["name"]))
    node = {}
    for i in elements:
      if i["config"]:
        if type(i["type"]) == type((1,1)):
          ntype = i["type"][0]
        else:
          ntype = i["type"]
        fd.write("""
  def _get_%s(self):
    return self.__%s
  def _set_%s(self,v):
      if not isinstance(v, %s):
        raise TypeError("%s must be of type %s")
      self.__%s = v\n""" % (i["name"], i["name"], i["name"], ntype, i["name"], ntype, i["name"]))
    for i in elements:
      if i["config"]:
        fd.write("""  %s = property(_get_%s, _set_%s)\n""" % (i["name"], i["name"], i["name"]))
      else:
        fd.write("""  %s = property(attrgetter("%s"))\n""" % (re.sub("^_","",i["name"]), i["name"]))

  fd.write("\n")
  return True

def get_element(fd, element, module, parent, path):
  this_object = []
  default = False
  p = False
  create_list = False
  if hasattr(element, 'i_children'):
    #print element.keyword
    #print element.keyword
    if element.keyword in ["container", "list"]:
      p = True
    elif element.keyword in ["leaf-list"]:
      create_list = True
    if element.i_children:
      #print dir(element)
      #print "children of %s (%s)" % (element.arg,type(element.i_children))
      #for i in element.i_children:
      #  print "  %s" % i.arg
      chs = element.i_children
      #print "class yc_%s(YANGContainer):" % element.arg
      get_children(fd, chs, module, element, path)
      #print child_code
      this_object.append({"name": element.arg, "type": "yc_%s_%s" % (element.arg, path.replace("/", "_")), "class": "container", "config": True})
      p = True
  if not p:
    #print dir(element)
    elemtype = class_map[element.search_one('type').arg]
    elemdefault = element.search_one('default').arg if element.search_one('default') else None
    # This maps a 'default' specified in the YANG file to a to a default of the Python type specified
    if elemtype[1] and elemdefault:
      elemdefault = elemtype[1][elemdefault]
    elemconfig = class_bool_map[element.search_one('config').arg] if element.search_one('config') else True
    if not elemconfig:
      elemname = "_%s" % safe_name(element.arg)
    else:
      elemname = safe_name(element.arg)
    #print "Appending %s" % element.arg
    if create_list:
      elemtype = ("TypedList", elemtype[0])
    else:
      elemtype = elemtype[0]
    this_object.append({"name": elemname, "type": elemtype, "class": "leaf", "default": elemdefault, "config": elemconfig})
  return this_object

