"""
mfghb module.  Contains the ModflowGhb class. Note that the user can access
the ModflowGhb class as `flopy.modflow.ModflowGhb`.

Additional information for this MODFLOW package can be found at the `Online
MODFLOW Guide
<http://water.usgs.gov/ogw/modflow/MODFLOW-2005-Guide/index.html?ghb.htm>`_.

"""
from numpy import atleast_2d
from flopy.mbase import Package
from flopy.utils.util_list import mflist

class ModflowGhb(Package):
    """
    MODFLOW General-Head Boundary Package Class.

    Parameters
    ----------
    model : model object
        The model object (of type :class:`flopy.modflow.mf.Modflow`) to which
        this package will be added.
    ighbcb : int
        is a flag and a unit number. (the default is 0).
    stress_period_data : list of boundaries or
                         recarray of boundaries or
                         dictionary of boundaries
        Each ghb cell is defined through definition of
        layer (int), row (int), column (int), stage (float), conductance (float)
        The simplest form is a list of boundaries that each are itself a list.
        One list is specified for each stress period. This gives the form of
            [
                [  #stress period 1
                    [l1, r1, c1, stage1, cond1],
                    [l2, r2, c2, stage2, cond2],
                    [l3, r3, c3, stage3, cond3],
                ],
                [  #stress period 2
                    [l1, r1, c1, stage1, cond1],
                    [l2, r2, c2, stage2, cond2],
                    [l3, r3, c3, stage3, cond3],
                ], ...
                [  #stress period kper
                    [l1, r1, c1, stage1, cond1],
                    [l2, r2, c2, stage2, cond2],
                    [l3, r3, c3, stage3, cond3],
                ],
            ]
        Note that if the number of lists is smaller than the number of stress
        periods, then the last list of ghbs will apply until the end of the
        simulation. Full details of all options to specify stress_period_data
        can be found in the flopy3 boundaries Notebook in the basic
        subdirectory of the examples directory
    options : list of strings
        Package options. (default is None).
    naux : int
        number of auxiliary variables
    extension : string
        Filename extension (default is 'ghb')
    unitnumber : int
        File unit number (default is 23).

    Attributes
    ----------
    mxactb : int
        Maximum number of ghbs for a stress period.  This is calculated
        automatically by FloPy based on the information in
        layer_row_column_data.

    Methods
    -------

    See Also
    --------

    Notes
    -----
    Parameters are not supported in FloPy.

    Examples
    --------

    >>> import flopy
    >>> m = flopy.modflow.Modflow()
    >>> lrcd = [[[2, 3, 4, 10., 100.]]]  #this well will be applied to all
    >>>                                  #stress periods
    >>> ghb = flopy.modflow.ModflowGhb(m, layer_row_column_data=lrcd)

    """
    def __init__(self, model, ipakcb=0, stress_period_data=None,dtype=None,
                 no_print=False, options=None, extension='ghb', unitnumber=23):
        Package.__init__(self, model, extension, 'GHB',
                         unitnumber)
        self.heading = '# GHB for MODFLOW, generated by Flopy.'
        self.url = 'ghb.htm'
        self.ipakcb = ipakcb  # no cell by cell terms are written
        self.no_print = no_print
        self.np = 0
        if options is None:
            options = []
        if self.no_print:
            options.append('NOPRINT')
        self.options = options
        self.parent.add_package(self)
        if dtype is not None:
            self.dtype = dtype
        else:
            self.dtype = self.get_default_dtype()
        self.stress_period_data = mflist(model,self.dtype,stress_period_data)

    def __repr__(self):
        return 'GHB package class'

    def ncells(self):
        """
        Returns the  maximum number of cells that have a ghb cell
        (developped for MT3DMS SSM package)
        """
        return self.stress_period_data.mxact

    def write_file(self):
        f_ghb = open(self.fn_path, 'w')
        f_ghb.write('%s\n' % self.heading)
        f_ghb.write('%10i%10i' % (self.stress_period_data.mxact, self.ipakcb))
        for option in self.options:
            f_ghb.write('  {}'.format(option))
        f_ghb.write('\n')
        self.stress_period_data.write_transient(f_ghb)
        f_ghb.close()

    def add_record(self,kper,index,values):
        try:
            self.stress_period_data.add_record(kper,index,values)
        except Exception as e:
            raise Exception("mfghb error adding record to list: "+str(e))

    @staticmethod
    def get_empty(ncells=0,aux_names=None):
        #get an empty recaray that correponds to dtype
        dtype = ModflowGhb.get_default_dtype()
        if aux_names is not None:
            dtype = Package.add_to_dtype(dtype,aux_names,np.float32)
        d = np.zeros((ncells,len(dtype)),dtype=dtype)
        d[:,:] = -1.0E+10
        return np.core.records.fromarrays(d.transpose(),dtype=dtype)

    @staticmethod
    def get_default_dtype():
        dtype = np.dtype([("k",np.int),("i",np.int),\
                         ("j",np.int),("bhead",np.float32),\
                        ("cond",np.float32)])
        return dtype

    @staticmethod
    def load(f, model, nper=None, ext_unit_dict=None):
        """
        Load an existing package.

        Parameters
        ----------
        f : filename or file handle
            File to load.
        model : model object
            The model object (of type :class:`flopy.modflow.mf.Modflow`) to
            which this package will be added.
        nper : int
            The number of stress periods.  If nper is None, then nper will be
            obtained from the model object. (default is None).
        ext_unit_dict : dictionary, optional
            If the arrays in the file are specified using EXTERNAL,
            or older style array control records, then `f` should be a file
            handle.  In this case ext_unit_dict is required, which can be
            constructed using the function
            :class:`flopy.utils.mfreadnam.parsenamefile`.

        Returns
        -------
        rch : ModflowGhb object
            ModflowGhb object.

        Examples
        --------

        >>> import flopy
        >>> m = flopy.modflow.Modflow()
        >>> ghb = flopy.modflow.ModflowGhb.load('test.ghb', m)

        """
        return Package.load(model,ModflowGhb,f,nper)